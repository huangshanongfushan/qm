<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.duplicall.qm.dao.mapper.UsersMapper">
    <resultMap id="BaseResultMap" type="com.duplicall.qm.common.model.Users">
        <id column="id" jdbcType="INTEGER" property="id"/>
        <result column="first_name" jdbcType="VARCHAR" property="firstName"/>
        <result column="last_name" jdbcType="VARCHAR" property="lastName"/>
        <result column="email_address" jdbcType="VARCHAR" property="emailAddress"/>
        <result column="organization_id" jdbcType="INTEGER" property="organizationId"/>
        <result column="login_id" jdbcType="VARCHAR" property="loginId"/>
        <result column="password" jdbcType="VARCHAR" property="password"/>
        <result column="employee_id" jdbcType="VARCHAR" property="employeeId"/>
    </resultMap>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
    id, first_name, last_name, email_address, organization_id, login_id, password, employee_id
  </sql>
    <select id="selectByExample" parameterType="com.duplicall.qm.common.model.UsersExample" resultMap="BaseResultMap">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        from users
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from users
        where id = #{id,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from users
    where id = #{id,jdbcType=INTEGER}
  </delete>
    <delete id="deleteByExample" parameterType="com.duplicall.qm.common.model.UsersExample">
        delete from users
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>
    <insert id="insert" parameterType="com.duplicall.qm.common.model.Users">
    insert into users (id, first_name, last_name, 
      email_address, organization_id, login_id, 
      password, employee_id)
    values (#{id,jdbcType=INTEGER}, #{firstName,jdbcType=VARCHAR}, #{lastName,jdbcType=VARCHAR}, 
      #{emailAddress,jdbcType=VARCHAR}, #{organizationId,jdbcType=INTEGER}, #{loginId,jdbcType=VARCHAR}, 
      #{password,jdbcType=VARCHAR}, #{employeeId,jdbcType=VARCHAR})
  </insert>
    <insert id="insertSelective" parameterType="com.duplicall.qm.common.model.Users">
        insert into users
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="firstName != null">
                first_name,
            </if>
            <if test="lastName != null">
                last_name,
            </if>
            <if test="emailAddress != null">
                email_address,
            </if>
            <if test="organizationId != null">
                organization_id,
            </if>
            <if test="loginId != null">
                login_id,
            </if>
            <if test="password != null">
                password,
            </if>
            <if test="employeeId != null">
                employee_id,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=INTEGER},
            </if>
            <if test="firstName != null">
                #{firstName,jdbcType=VARCHAR},
            </if>
            <if test="lastName != null">
                #{lastName,jdbcType=VARCHAR},
            </if>
            <if test="emailAddress != null">
                #{emailAddress,jdbcType=VARCHAR},
            </if>
            <if test="organizationId != null">
                #{organizationId,jdbcType=INTEGER},
            </if>
            <if test="loginId != null">
                #{loginId,jdbcType=VARCHAR},
            </if>
            <if test="password != null">
                #{password,jdbcType=VARCHAR},
            </if>
            <if test="employeeId != null">
                #{employeeId,jdbcType=VARCHAR},
            </if>
        </trim>
    </insert>
    <select id="countByExample" parameterType="com.duplicall.qm.common.model.UsersExample"
            resultType="java.lang.Integer">
        select count(*) from users
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <update id="updateByExampleSelective" parameterType="map">
        update users
        <set>
            <if test="record.id != null">
                id = #{record.id,jdbcType=INTEGER},
            </if>
            <if test="record.firstName != null">
                first_name = #{record.firstName,jdbcType=VARCHAR},
            </if>
            <if test="record.lastName != null">
                last_name = #{record.lastName,jdbcType=VARCHAR},
            </if>
            <if test="record.emailAddress != null">
                email_address = #{record.emailAddress,jdbcType=VARCHAR},
            </if>
            <if test="record.organizationId != null">
                organization_id = #{record.organizationId,jdbcType=INTEGER},
            </if>
            <if test="record.loginId != null">
                login_id = #{record.loginId,jdbcType=VARCHAR},
            </if>
            <if test="record.password != null">
                password = #{record.password,jdbcType=VARCHAR},
            </if>
            <if test="record.employeeId != null">
                employee_id = #{record.employeeId,jdbcType=VARCHAR},
            </if>
        </set>
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExample" parameterType="map">
        update users
        set id = #{record.id,jdbcType=INTEGER},
        first_name = #{record.firstName,jdbcType=VARCHAR},
        last_name = #{record.lastName,jdbcType=VARCHAR},
        email_address = #{record.emailAddress,jdbcType=VARCHAR},
        organization_id = #{record.organizationId,jdbcType=INTEGER},
        login_id = #{record.loginId,jdbcType=VARCHAR},
        password = #{record.password,jdbcType=VARCHAR},
        employee_id = #{record.employeeId,jdbcType=VARCHAR}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByPrimaryKeySelective" parameterType="com.duplicall.qm.common.model.Users">
        update users
        <set>
            <if test="firstName != null">
                first_name = #{firstName,jdbcType=VARCHAR},
            </if>
            <if test="lastName != null">
                last_name = #{lastName,jdbcType=VARCHAR},
            </if>
            <if test="emailAddress != null">
                email_address = #{emailAddress,jdbcType=VARCHAR},
            </if>
            <if test="organizationId != null">
                organization_id = #{organizationId,jdbcType=INTEGER},
            </if>
            <if test="loginId != null">
                login_id = #{loginId,jdbcType=VARCHAR},
            </if>
            <if test="password != null">
                password = #{password,jdbcType=VARCHAR},
            </if>
            <if test="employeeId != null">
                employee_id = #{employeeId,jdbcType=VARCHAR},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.duplicall.qm.common.model.Users">
    update users
    set first_name = #{firstName,jdbcType=VARCHAR},
      last_name = #{lastName,jdbcType=VARCHAR},
      email_address = #{emailAddress,jdbcType=VARCHAR},
      organization_id = #{organizationId,jdbcType=INTEGER},
      login_id = #{loginId,jdbcType=VARCHAR},
      password = #{password,jdbcType=VARCHAR},
      employee_id = #{employeeId,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>

</mapper>